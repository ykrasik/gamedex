import groovy.json.JsonOutput

buildscript {
    ext {
        javaMaxHeap = '3g'

        ktlin = [:].with {
            v = '1.4.10'
            majorV = '1.4'
            std = [group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: v]
            reflect = [group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: v]
            delegate
        }

        coroutines = [:].with {
            v = '1.4.0'
            core = [group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: v]
            javaFx = [group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-javafx', version: v]
            debug = [group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-debug', version: v]
            test = [group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-test', version: v]
            delegate
        }

        guice = [group: 'com.google.inject', name: 'guice', version: '4.2.3']
        classGraph = [group: 'io.github.classgraph', name: 'classgraph', version: '4.8.90']

        slf4j = [:].with {
            v = '1.7.30'
            api = [group: 'org.slf4j', name: 'slf4j-api', version: v]
            julBridge = [group: 'org.slf4j', name: 'jul-to-slf4j', version: v]
            delegate
        }
        logback = [group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3']

        typesafeConfig = [group: 'com.typesafe', name: 'config', version: '1.4.1']
        config4k = [group: 'io.github.config4k', name: 'config4k', version: '0.4.2']

        guava = [group: 'com.google.guava', name: 'guava', version: '30.0-jre']

        jodaTime = [group: 'joda-time', name: 'joda-time', version: '2.10.8']

        khttp = [group: 'com.github.jkcclemens', name: 'khttp', version: 'master-SNAPSHOT']

        jackson = [:].with {
            v = '2.11.3'
            core = [group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: v]
            kotlin = [group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: v]
            joda = [group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-joda', version: v]
            delegate
        }

        h2 = [group: 'com.h2database', name: 'h2', version: '1.4.196']
        exposed = [group: 'org.jetbrains.exposed', name: 'exposed', version: '0.17.7']

        controlsFx = [group: 'org.controlsfx', name: 'controlsfx', version: '8.40.17']
        jFoenix = [group: 'com.jfoenix', name: 'jfoenix', version: '8.0.10']
        tornadoFx = [group: 'no.tornado', name: 'tornadofx', version: '1.7.18']
        ikonli = [:].with {
            v = '2.6.0'
            javaFx = [group: 'org.kordamp.ikonli', name: 'ikonli-javafx', version: v]
            fontAwesome = [group: 'org.kordamp.ikonli', name: 'ikonli-fontawesome5-pack', version: v]
            materialDesign = [group: 'org.kordamp.ikonli', name: 'ikonli-materialdesign-pack', version: v]
            delegate
        }
        richTextFx = [group: 'org.fxmisc.richtext', name: 'richtextfx', version: '0.10.5']
//        bootstrapFx = [group: 'org.kordamp.bootstrapfx', name: 'bootstrapfx-core', version: '0.2.2']

        diff = [group: 'com.googlecode.java-diff-utils', name: 'diffutils', version: '1.3.0']
        completely = [group: 'com.miguelfonseca.completely', name: 'completely-core', version: '0.8.0']
        stringSimilarity = [group: 'info.debatty', name: 'java-string-similarity', version: '2.0.0']

        kotlinTest = [group: 'io.kotlintest', name: 'kotlintest', version: '2.0.7']
        mockK = [group: 'io.mockk', name: 'mockk', version: '1.10.2']

        ktor = [:].with {
            v = '1.4.1'
            core = [group: 'io.ktor', name: 'ktor-server-core', version: v]
            netty = [group: 'io.ktor', name: 'ktor-server-netty', version: v]
            clientCore = [group: 'io.ktor', name: 'ktor-client-core-jvm', version: v]
            clientApache = [group: 'io.ktor', name: 'ktor-client-apache', version: v]
//            clientJson = [group: 'io.ktor', name: 'ktor-client-json', version: v]
            clientLogging = [group: 'io.ktor', name: 'ktor-client-logging-jvm', version: v]
            clientJackson = [group: 'io.ktor', name: 'ktor-client-jackson', version: v]
            delegate
        }
        wiremock = [group: 'com.github.tomakehurst', name: 'wiremock', version: '2.27.2']
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${ktlin.v}"
        classpath "de.dynamicfiles.projects.gradle.plugins:javafx-gradle-plugin:8.8.2"
    }
}

plugins {
    id 'com.github.hierynomus.license' version '0.15.0'
    id 'com.github.ben-manes.versions' version '0.33.0'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

// Equivalent to calling --continue from the command line.
// Will run all tests and produce a report of all failed tests at the end.
gradle.startParameter.continueOnFailure = true

apply from: gradleFile('build-metadata.gradle')
apply from: gradleFile('git-version.gradle')
apply from: gradleFile('versions.gradle')

version = gitVersion()

allprojects {
    group 'com.gitlab.ykrasik.gamedex'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url "http://dl.bintray.com/kotlin/exposed" }
        maven { url "http://dl.bintray.com/kotlin/ktor" }
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'kotlin'
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    if (subprojects.isEmpty()) {
        apply from: gradleFile('license.gradle')
        apply from: gradleFile('artifacts.gradle')
    }
    if (!project.hasProperty('isPlugin')) {
        version = rootProject.version
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
            apiVersion = ktlin.majorV
            languageVersion = ktlin.majorV
            freeCompilerArgs += [
                "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-Xuse-experimental=kotlinx.coroutines.ObsoleteCoroutinesApi",
                "-Xuse-experimental=kotlin.time.ExperimentalTime",
                "-Xallow-result-return-type",
                "-Xopt-in=kotlinx.coroutines.FlowPreview"
            ]
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
            apiVersion = ktlin.majorV
            languageVersion = ktlin.majorV
            freeCompilerArgs += [
                "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-Xuse-experimental=kotlinx.coroutines.ObsoleteCoroutinesApi",
                "-Xuse-experimental=kotlin.time.ExperimentalTime",
                "-Xallow-result-return-type",
                "-Xopt-in=kotlinx.coroutines.FlowPreview"
            ]
        }
    }
    kotlin {
    }

    test {
        testLogging {
            events 'failed'
        }

        systemProperties System.getProperties() + ['gameDex.env': 'dev']
    }
}

project("gamedex-api") {
    ext {
        publishJar = true
        publishTestKit = true
    }

    apply from: gradleFile('publication.gradle')

    dependencies {
        api ktlin.std
        api ktlin.reflect
        api coroutines.core

        api slf4j.api

        api guice

        api typesafeConfig
        api config4k

        api guava

        api jodaTime

        api ktor.clientCore
        implementation ktor.clientApache
        implementation ktor.clientJackson
        implementation ktor.clientLogging

        api jackson.core
        implementation jackson.kotlin
        implementation jackson.joda

        testCompile kotlinTest
        testCompile mockK

        testCompile coroutines.debug
        testCompile coroutines.test

        testCompile wiremock
        testCompile ktor.core
        testCompile ktor.netty
        testCompile logback
    }

    testSourcesJar {
        exclude '**/*.jpg'
        exclude '**/words.txt'
        exclude '**/genres.txt'
    }
}

project("app:gamedex-app-api") {
    dependencies {
        fullDependency ":gamedex-api"

        api diff
    }
}

project("core:gamedex-core-common") {
    task createVersionJsonFile() {
        def destFile = new File(generatedResources, "version.json")
        outputs.dir(generatedResources)
        outputs.file(destFile)
        inputs.properties([
            version   : version,
            commitHash: commitHash,
            commitDate: commitDate
        ])

        doLast {
            println("Generating $destFile")
            destFile.write(JsonOutput.prettyPrint(JsonOutput.toJson([
                version   : version,
                buildDate : buildDate,
                commitHash: commitHash,
                commitDate: commitDate
            ])))
        }
    }

    compileKotlin.dependsOn createVersionJsonFile

    dependencies {
        fullDependency ":app:gamedex-app-api"

        api jackson.kotlin
        api jackson.joda
    }
}

project("core:gamedex-core-file") {
    dependencies {
        fullDependency ":core:gamedex-core-common"
    }
}

project("core:gamedex-core-game") {
    dependencies {
        fullDependency ":core:gamedex-core-common"
        implementation project(":core:gamedex-core-persistence")

        implementation completely
    }
}

project("core:gamedex-core-maintenance") {
    dependencies {
        fullDependency ":core:gamedex-core-common"
        implementation project(":core:gamedex-core-persistence")

        implementation stringSimilarity
    }
}

project("core:gamedex-core-image") {
    dependencies {
        fullDependency ":core:gamedex-core-common"
    }
}

project("core:gamedex-core-library") {
    dependencies {
        fullDependency ":core:gamedex-core-common"
        implementation project(":core:gamedex-core-persistence")
    }
}

project("core:gamedex-core-log") {
    dependencies {
        fullDependency ":core:gamedex-core-common"

        implementation logback
        implementation slf4j.julBridge
    }
}

project("core:gamedex-core-persistence") {
    dependencies {
        fullDependency ":gamedex-api"

        implementation h2
        implementation(exposed) {
            exclude group: h2.group, module: h2.name
        }
    }
}

project("core:gamedex-core-provider") {
    dependencies {
        fullDependency ":core:gamedex-core-common"
    }
}

project("core:gamedex-core-filter") {
    dependencies {
        fullDependency ":core:gamedex-core-common"
    }
}

project("core:gamedex-core") {
    dependencies {
        fullDependency ":core:gamedex-core-common"

        implementation project(":core:gamedex-core-file")
        implementation project(":core:gamedex-core-image")
        implementation project(":core:gamedex-core-game")
        implementation project(":core:gamedex-core-maintenance")
        implementation project(":core:gamedex-core-library")
        implementation project(":core:gamedex-core-log")
        implementation project(":core:gamedex-core-persistence")
        implementation project(":core:gamedex-core-provider")
        implementation project(":core:gamedex-core-filter")

        implementation classGraph
    }
}

project("app:javafx:ikonli-material-design-pack") {
    dependencies {
        implementation ktlin.std
        implementation coroutines.core
        api ikonli.javaFx
    }
}

project("app:javafx:gamedex-javafx-common") {
    dependencies {
        fullDependency ":app:gamedex-app-api"
        api project(":app:javafx:ikonli-material-design-pack")

        api tornadoFx
        api jFoenix
        api controlsFx
        api richTextFx
        api coroutines.javaFx
    }
}

project("app:javafx:gamedex-javafx-view") {
    dependencies {
        fullDependency ":app:javafx:gamedex-javafx-common"
    }
}

def gradleFile(String fileName) { file("gradle/$fileName") }
def pluginProjects() { rootProject.allprojects.findAll { it.hasProperty('isPlugin') } }