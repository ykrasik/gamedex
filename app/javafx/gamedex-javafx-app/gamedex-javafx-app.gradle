apply plugin: 'application'

applicationDefaultJvmArgs = ["-Xmx$javaMaxHeap", "-XX:+UseConcMarkSweepGC", "-XX:+HeapDumpOnOutOfMemoryError", "-server"]
executableDir = ''
mainClassName = "com.gitlab.ykrasik.gamedex.javafx.Main"

startScripts {
    classpath = files('$APP_HOME/lib/*')
}

apply plugin: 'io.github.fvarrui.javapackager.plugin'

dependencies {
    fullDependency ":core:gamedex-core"
    fullDependency ":app:javafx:gamedex-javafx-view"

    testImplementation project(":core:gamedex-core-persistence")
    testImplementation project(":core:gamedex-core-provider")

    pluginProjects().forEach {
        testImplementation testFixtures(it)
    }
}

task copyPluginsDist(type: Copy) {
    from pluginProjects().shadowJar
    into new File(project.buildDir, "plugins")
}

javapackager {
    mainClass = mainClassName
    additionalResources = copyPluginsDist.outputs.files.files.asList()
    bundleJre = true
    jrePath = new File(System.properties['java.home'])
    generateInstaller = project.hasProperty("installer")

    name = "GameDex"
    displayName = "GameDex"
    description = "GameDex"
    organizationName = "Yevgeny Krasik"
    url = "https://github.com/ykrasik/gamedex"
    vmArgs = applicationDefaultJvmArgs

    winConfig {
        generateSetup = true
        generateMsi = false

        disableWelcomePage = false
        disableDirPage = false
        disableProgramGroupPage = true
        disableFinishedPage = false
        disableRunAfterInstall = false
    }
}

project.tasks.getByName("package").dependsOn copyPluginsDist

task dist(type: Copy, dependsOn: 'package') {
    from new File(project.buildDir, "GameDex")
    into new File(project.rootDir, "dist")
}

task cleanDist(type: Delete) {
    delete new File(project.rootDir, "dist")
}

clean.finalizedBy cleanDist

task runDemo(dependsOn: pluginProjects().shadowJar, type: JavaExec) {
    mainClass = 'com.gitlab.ykrasik.gamedex.javafx.TestApplication'
    classpath = sourceSets.test.runtimeClasspath
}

test.dependsOn pluginProjects().shadowJar
